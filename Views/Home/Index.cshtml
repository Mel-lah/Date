@{
    ViewData["Title"] = "Home Page";
}

<style>
    .alert {
        position: absolute;
        top: 10%;
        left: 50%;
        transform: translate(-50%, -50%);
        z-index: 9999;
        display: none;
        padding: 10px;
        border-radius: 5px;
        background-color: #dff0d8;
        color: #3c763d;
        font-weight: bold;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }
</style>

<div class="m-5">
    <!-- Button to trigger the modal -->
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">Set Start and End Date</button>
</div>

<!-- The Modal -->
<div class="modal" id="myModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Select Dates</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>
            <!-- Modal Body -->
            <div class="modal-body">
                <div class="modal-body">
                    <!-- Date Start and Date End input fields using DateTimePicker -->
                    <div class="form-group">
                        <label for="dateStart">Date Start:</label>
                        <div id="dateValidationMessage" class="text-danger"></div>
                        <div class="input-group date" id="datetimepickerStart" data-target-input="nearest">
                            <input type="text" class="form-control datetimepicker-input" data-target="#datetimepickerStart" id="dateStart" required />
                            <div class="input-group-append" data-target="#datetimepickerStart" data-toggle="datetimepicker">
                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="dateEnd">Test Date End:</label>
                        <div id="dateValidationMessage" class="text-danger"></div>
                        <div class="input-group date" id="datetimepickerEnd" data-target-input="nearest">
                            <input type="text" class="form-control datetimepicker-input" data-target="#datetimepickerEnd" id="dateEnd" required />
                            <div class="input-group-append" data-target="#datetimepickerEnd" data-toggle="datetimepicker">
                                <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Modal Footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveButton">Save</button>
            </div>
        </div>
    </div>
</div>

<div id="successPopup" class="alert alert-success" style="display: none;">
    Dates saved successfully!
</div>

<!-- Include Bootstrap and jQuery JavaScript libraries -->
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<script>
    function calculateDateRange(start, end) {
        const startDate = moment(start, 'MM/DD/YYYY hh:mm:ss A');
        const endDate = moment(end, 'MM/DD/YYYY hh:mm:ss A');
        const dateRange = [];

        while (startDate.isSameOrBefore(endDate)) {
            dateRange.push(startDate.format('MM/DD/YYYY'));
            startDate.add(1, 'days');
        }

        return dateRange;
    }

    $(document).ready(function () {
        // Calculate current date and time using Moment.js
        const now = moment();
        const tomorrow = moment().add(1, 'day');

        // Format the dates for input values
        const formattedNow = now.format('MM/DD/YYYY hh:mm:ss A');
        const formattedTomorrow = tomorrow.format('MM/DD/YYYY hh:mm:ss A');

        // Set default values for the input fields
        $('#datetimepickerStart').datetimepicker({
            format: 'MM/DD/YYYY hh:mm:ss A',
            minDate: now // Set minDate to current date
        });

        $('#datetimepickerEnd').datetimepicker({
            format: 'MM/DD/YYYY hh:mm:ss A',
            minDate: now // Set minDate to current date
        });

        // Set initial input field values
        $('#dateStart').val(formattedNow);
        $('#dateEnd').val(formattedTomorrow);

        // Initialize date picker interaction
        $('#datetimepickerStart').on('change.datetimepicker', function (e) {
            $('#datetimepickerEnd').datetimepicker('minDate', e.date);

            // Validate date range
            validateDateRange();

            // Call the function to highlight the date range
            highlightDateRange();
        });

        $('#datetimepickerEnd').on('change.datetimepicker', function (e) {
            $('#datetimepickerStart').datetimepicker('maxDate', e.date);

            // Validate date range
            validateDateRange();

            // Call the function to highlight the date range
            highlightDateRange();
        });

        // Save button click event
        $('#saveButton').click(function () {
            const startDate = $('#dateStart').val();
            const endDate = $('#dateEnd').val();

            // Validate date range before saving
            if (!validateDateRange()) {
                return; // Abort saving if validation fails
            }
        
            // Save the dates to local storage
            localStorage.setItem('startDate', startDate);
            localStorage.setItem('endDate', endDate);
        
            // Show the success popup
            $('#successPopup').fadeIn();
        
            // Close the success popup after 3 seconds
            setTimeout(function () {
                $('#successPopup').fadeOut();
            }, 3000);

        });

        /// Function to validate the date range
        function validateDateRange() {
            const startDate = moment($('#dateStart').val(), 'MM/DD/YYYY hh:mm:ss A');
            const endDate = moment($('#dateEnd').val(), 'MM/DD/YYYY hh:mm:ss A');

            if (endDate.isBefore(startDate)) {
                // Display an error message
                $('#dateValidationMessage').text('End date must not be earlier than start date');
                return false; // Validation failed
            } else {
                // Clear the error message
                $('#dateValidationMessage').text('');
                return true; // Validation successful
            }
        }

        function highlightDateRange() {
            const startDate = $('#dateStart').val();
            const endDate = $('#dateEnd').val();
            const dateRange = calculateDateRange(startDate, endDate);

            // Remove existing highlights
            $('.day').removeClass('highlight');

            // Add highlight class to cells in the date range
            dateRange.forEach(date => {
                const cellSelector = `[data-day="${date}"]`;
                $(cellSelector).addClass('highlight');
            });
        }
    });
</script>
<style>
    .day.highlight {
        background-color: #007BFF;
    }
</style>
